// Generated by Dagger (https://dagger.dev).
package com.mohammed.hypermarketandroidtask.di;

import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.mohammed.hypermarketandroidtask.MainComponent;
import com.mohammed.hypermarketandroidtask.RetrofitServices;
import com.mohammed.hypermarketandroidtask.SharedPreferencesStorage;
import com.mohammed.hypermarketandroidtask.SharedPreferencesStorage_Factory;
import com.mohammed.hypermarketandroidtask.homef.HomeFragment;
import com.mohammed.hypermarketandroidtask.homef.HomeFragment_MembersInjector;
import com.mohammed.hypermarketandroidtask.homef.MainActivity;
import com.mohammed.hypermarketandroidtask.homef.MainActivity_MembersInjector;
import com.mohammed.hypermarketandroidtask.presentation.HomeViewModel;
import com.mohammed.hypermarketandroidtask.presentation.HomeViewModel_Factory;
import com.mohammed.hypermarketandroidtask.presentation.SearchViewModelModel;
import com.mohammed.hypermarketandroidtask.presentation.SearchViewModelModel_Factory;
import com.mohammed.hypermarketandroidtask.presentation.ViewModelFactory;
import com.mohammed.hypermarketandroidtask.presentation.ViewModelFactory_Factory;
import com.mohammed.hypermarketandroidtask.remotedatasource.ProviderRemoteDataSourceImpl;
import com.mohammed.hypermarketandroidtask.remotedatasource.ProviderRemoteDataSourceImpl_Factory;
import com.mohammed.hypermarketandroidtask.repository.RepositoryImpl;
import com.mohammed.hypermarketandroidtask.repository.RepositoryImpl_Factory;
import com.mohammed.hypermarketandroidtask.search.SearchFragment;
import com.mohammed.hypermarketandroidtask.search.SearchFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppllicationComponent implements AppllicationComponent {
  private Provider<Context> contextProvider;

  private Provider<SharedPreferencesStorage> sharedPreferencesStorageProvider;

  private Provider<RetrofitServices> provideLoginRetrofitServiceProvider;

  private Provider<ProviderRemoteDataSourceImpl> providerRemoteDataSourceImplProvider;

  private Provider<RepositoryImpl> repositoryImplProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<SearchViewModelModel> searchViewModelModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppllicationComponent(NetworkModule networkModuleParam, Context contextParam) {

    initialize(networkModuleParam, contextParam);
  }

  public static AppllicationComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam, final Context contextParam) {
    this.contextProvider = InstanceFactory.create(contextParam);
    this.sharedPreferencesStorageProvider = DoubleCheck.provider(SharedPreferencesStorage_Factory.create(contextProvider));
    this.provideLoginRetrofitServiceProvider = DoubleCheck.provider(NetworkModule_ProvideLoginRetrofitServiceFactory.create(networkModuleParam));
    this.providerRemoteDataSourceImplProvider = ProviderRemoteDataSourceImpl_Factory.create(provideLoginRetrofitServiceProvider);
    this.repositoryImplProvider = RepositoryImpl_Factory.create((Provider) providerRemoteDataSourceImplProvider, sharedPreferencesStorageProvider);
    this.homeViewModelProvider = HomeViewModel_Factory.create((Provider) repositoryImplProvider);
    this.searchViewModelModelProvider = SearchViewModelModel_Factory.create((Provider) repositoryImplProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2).put(HomeViewModel.class, (Provider) homeViewModelProvider).put(SearchViewModelModel.class, (Provider) searchViewModelModelProvider).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public MainComponent.Factory mainComponent() {
    return new MainComponentFactory();}

  private static final class Factory implements AppllicationComponent.Factory {
    @Override
    public AppllicationComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new DaggerAppllicationComponent(new NetworkModule(), context);
    }
  }

  private final class MainComponentFactory implements MainComponent.Factory {
    @Override
    public MainComponent create() {
      return new MainComponentImpl();
    }
  }

  private final class MainComponentImpl implements MainComponent {
    private MainComponentImpl() {

    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);}

    @Override
    public void inject(HomeFragment home) {
      injectHomeFragment(home);}

    @Override
    public void inject(SearchFragment searchFragment) {
      injectSearchFragment(searchFragment);}

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectSharedPreferencesStorage(instance, DaggerAppllicationComponent.this.sharedPreferencesStorageProvider.get());
      return instance;
    }

    private HomeFragment injectHomeFragment(HomeFragment instance) {
      HomeFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppllicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }

    private SearchFragment injectSearchFragment(SearchFragment instance) {
      SearchFragment_MembersInjector.injectViewModelFactory(instance, DaggerAppllicationComponent.this.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
